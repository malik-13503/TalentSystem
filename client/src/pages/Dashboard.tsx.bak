import { useEffect, useState } from "react";
import { useLocation, useRoute } from "wouter";
import { useQuery } from "@tanstack/react-query";
import { Sidebar } from "@/components/layout/Sidebar";
import { MobileHeader } from "@/components/layout/MobileHeader";
import { TalentTable } from "@/components/admin/TalentTable";
import { TalentSearch } from "@/components/admin/TalentSearch";
import { TalentFilter } from "@/components/admin/TalentFilter";
import { PresentationManager } from "@/components/presentation/PresentationManager";
import { SystemSettings } from "@/components/settings/SystemSettings";
import { Promoter } from "@shared/schema";
import { Users, FileText, CheckSquare, BarChart2, Image, Calendar as CalendarIcon, LineChart, Upload } from "lucide-react";

export default function Dashboard() {
  const [searchQuery, setSearchQuery] = useState("");
  const [filters, setFilters] = useState({
    nationality: "all",
    area: "all",
    experience: "all",
    status: "all",
    gender: "all",
    height: "all",
    ageRange: "all",
  });
  const [location, setLocation] = useLocation();
  const [isDashboardRoute] = useRoute('/dashboard');
  const [isTalentsRoute] = useRoute('/talents');
  const [isPresentationsRoute] = useRoute('/presentations');
  const [isSettingsRoute] = useRoute('/settings');
  const [isAnalyticsRoute] = useRoute('/analytics');
  const [isMediaRoute] = useRoute('/media');
  // Message route removed
  const [isCalendarRoute] = useRoute('/calendar');
  
  // Get title based on current route
  const getPageTitle = () => {
    if (isTalentsRoute) return "Talent Management";
    if (isPresentationsRoute) return "Presentations";
    if (isSettingsRoute) return "Settings";
    if (isAnalyticsRoute) return "Analytics Dashboard";
    if (isMediaRoute) return "Media Library";
    // Message route removed
    if (isCalendarRoute) return "Calendar";
    return "Admin Dashboard";
  };

  // Check if user is logged in
  useEffect(() => {
    const user = localStorage.getItem("user");
    if (!user) {
      setLocation("/admin");
    }
  }, [setLocation]);

  // Fetch promoters with search and filters
  const {
    data: promoters = [],
    isLoading,
    isError,
    refetch,
  } = useQuery<Promoter[]>({
    queryKey: [
      "/api/promoters",
      searchQuery,
      filters.nationality,
      filters.area,
      filters.experience,
      filters.status,
      filters.gender,
      filters.height,
      filters.ageRange,
    ],
    queryFn: () => {
      let url = `/api/promoters?`;
      
      if (searchQuery) {
        url += `search=${encodeURIComponent(searchQuery)}&`;
      }
      
      // Apply all filters that aren't "all"
      Object.entries(filters).forEach(([key, value]) => {
        if (value && value !== 'all') {
          url += `${key}=${encodeURIComponent(value)}&`;
        }
      });
      
      return fetch(url).then(res => {
        if (!res.ok) throw new Error("Failed to fetch promoters");
        return res.json();
      });
    },
  });

  const handleSearch = (query: string) => {
    setSearchQuery(query);
  };

  const handleFilterChange = (key: string, value: string) => {
    setFilters((prev) => ({
      ...prev,
      [key]: value,
    }));
  };

  const handleExportData = () => {
    if (!promoters.length) return;
    
    // Convert promoters to CSV
    const headers = ["ID", "Name", "Nationality", "Experience", "Area", "Status"];
    const csvRows = [
      headers.join(","),
      ...promoters.map(p => [
        p.uniqueId,
        `${p.firstName} ${p.lastName}`,
        p.nationality,
        p.yearsExperience,
        p.area,
        p.status
      ].join(","))
    ];
    
    const csvContent = csvRows.join("\n");
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    
    // Create download link
    const link = document.createElement("a");
    link.setAttribute("href", url);
    link.setAttribute("download", "promoters.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="flex h-screen overflow-hidden">
      <Sidebar />
      <div className="flex-1 flex flex-col overflow-hidden bg-gray-50">
        <MobileHeader />

        <main className="flex-1 overflow-y-auto p-4 md:p-6 pt-16 md:pt-6 pb-20">
          {/* Dashboard Header with stats */}
          {isDashboardRoute && (
            <div className="mb-6">
              <h1 className="text-2xl font-bold text-gray-800 mb-5">Welcome to the Footprint Advertising Solutions Dashboard</h1>
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="bg-gradient-to-br from-orange-600 to-orange-500 rounded-lg shadow-lg p-5 text-white relative overflow-hidden">
                  <div className="absolute right-0 top-0 -mt-4 -mr-12 opacity-30">
                    <Users className="h-32 w-32 text-orange-300" />
                  </div>
                  <p className="text-orange-100 text-sm uppercase font-semibold tracking-wider">Total Talent</p>
                  <h2 className="text-4xl font-bold mt-2">{promoters.length}</h2>
                  <div className="flex items-center mt-3">
                    <span className="text-green-300 text-sm font-medium flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 10l7-7m0 0l7 7m-7-7v18" />
                      </svg>
                      12% increase
                    </span>
                  </div>
                </div>
                
                <div className="bg-gradient-to-br from-yellow-500 to-yellow-300 rounded-lg shadow-lg p-5 text-gray-800 relative overflow-hidden">
                  <div className="absolute right-0 top-0 -mt-4 -mr-12 opacity-30">
                    <CheckSquare className="h-32 w-32 text-yellow-600" />
                  </div>
                  <p className="text-gray-800 text-sm uppercase font-semibold tracking-wider">Active Talent</p>
                  <h2 className="text-4xl font-bold mt-2">{promoters.filter(p => p.status === "complete").length}</h2>
                  <div className="flex items-center mt-3">
                    <span className="text-purple-800 text-sm font-medium flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 10l7-7m0 0l7 7m-7-7v18" />
                      </svg>
                      5% increase
                    </span>
                  </div>
                </div>
                
                <div className="bg-gradient-to-br from-purple-200 to-pink-100 rounded-lg shadow-lg p-5 text-purple-900 relative overflow-hidden">
                  <div className="absolute right-0 top-0 -mt-4 -mr-12 opacity-30">
                    <FileText className="h-32 w-32 text-purple-300" />
                  </div>
                  <p className="text-purple-800 text-sm uppercase font-semibold tracking-wider">Presentations</p>
                  <h2 className="text-4xl font-bold mt-2">12</h2>
                  <div className="flex items-center mt-3">
                    <span className="text-purple-800 text-sm font-medium flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 10l7-7m0 0l7 7m-7-7v18" />
                      </svg>
                      18% increase
                    </span>
                  </div>
                </div>
              </div>
            </div>
          )}

          <div className="bg-white rounded-xl shadow-md overflow-hidden border border-gray-100">
            <div className="bg-gradient-to-r from-orange-600 via-orange-500 to-orange-600 p-6 relative overflow-hidden">
              {/* Decorative elements */}
              <div className="absolute top-0 right-0 w-40 h-40 bg-yellow-400 rounded-full opacity-10 transform translate-x-1/3 -translate-y-1/2"></div>
              <div className="absolute bottom-0 left-0 w-32 h-32 bg-orange-500 rounded-full opacity-10 transform -translate-x-1/3 translate-y-1/3"></div>
              
              <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4 relative z-10">
                <div>
                  <h2 className="text-xl font-bold text-white">
                    {isSettingsRoute 
                      ? "System Settings" 
                      : isPresentationsRoute 
                        ? "Presentation Manager"
                        : isAnalyticsRoute
                          ? "Analytics Dashboard"
                          : isMediaRoute
                            ? "Media Library"
                            : isCalendarRoute
                              ? "Calendar"
                              : isDashboardRoute
                                ? "Recent Talent"
                                : "Talent Database"}
                  </h2>
                  <p className="text-orange-100 text-sm mt-1">
                    {isSettingsRoute 
                      ? "Configure your application preferences"
                      : isPresentationsRoute
                        ? "Create and manage talent presentations"
                        : isAnalyticsRoute
                          ? "Analytics and reporting for talent performance"
                          : isMediaRoute
                            ? "Manage your media files and documents"
                            : isCalendarRoute
                              ? "Schedule and manage events and bookings"
                              : `Showing ${promoters.length} talents in the database`}
                  </p>
                </div>
                <div className="flex flex-col md:flex-row gap-4">
                  {!isSettingsRoute && !isPresentationsRoute && <TalentSearch onSearch={handleSearch} />}
                  {!isSettingsRoute && !isPresentationsRoute && (
                    <button
                      onClick={() => setLocation("/register")}
                      className="flex items-center justify-center px-4 py-2 bg-white rounded-md text-orange-600 font-medium hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-orange-300 focus:border-transparent shadow-md transition-colors duration-200"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                      </svg>
                      <span>Add New Talent</span>
                    </button>
                  )}
                </div>
              </div>
            </div>

            <div className="p-6">
              {(isDashboardRoute || isTalentsRoute) && (
                <div className="mb-6 flex flex-col md:flex-row md:items-center md:justify-between gap-4 bg-orange-50 p-4 rounded-lg">
                  <TalentFilter onChange={handleFilterChange} />
                  <div className="flex items-center space-x-3">
                    <button
                      onClick={handleExportData}
                      type="button"
                      className="px-3 py-2 border border-orange-200 rounded-md text-orange-700 bg-white hover:bg-orange-50 focus:outline-none focus:ring-2 focus:ring-orange-300 focus:border-transparent shadow-sm flex items-center"
                      title="Export data"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                      </svg>
                      <span className="hidden sm:inline">Export CSV</span>
                    </button>
                    
                    <div className="dropdown-menu-wrapper relative inline-block">
                      <button
                        onClick={() => refetch()}
                        type="button"
                        className="px-3 py-2 border border-orange-200 rounded-md text-orange-700 bg-white hover:bg-orange-50 focus:outline-none focus:ring-2 focus:ring-orange-300 focus:border-transparent shadow-sm flex items-center"
                        title="Refresh data"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                        </svg>
                        <span className="hidden sm:inline">Refresh</span>
                      </button>
                    </div>
                  </div>
                </div>
              )}

              {/* Display appropriate content based on the route */}
              {(isDashboardRoute || isTalentsRoute) && (
                <TalentTable 
                  promoters={promoters} 
                  isLoading={isLoading} 
                  isError={isError} 
                />
              )}
              
              {isPresentationsRoute && (
                <PresentationManager />
              )}
              
              {isSettingsRoute && (
                <SystemSettings />
              )}
              
              {isAnalyticsRoute && (
                <div className="space-y-6">
                  <div className="bg-orange-50 p-6 rounded-xl border border-orange-100">
                    <h3 className="text-lg font-medium text-gray-800 mb-4">Performance Analytics</h3>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                      <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-100">
                        <div className="flex items-center justify-between mb-4">
                          <h4 className="text-sm font-medium text-gray-700">Talent Status Distribution</h4>
                          <BarChart2 className="h-5 w-5 text-orange-500" />
                        </div>
                        <div className="h-48 flex flex-col items-center justify-center">
                          {promoters.length > 0 ? (
                            <>
                              <div className="w-full h-40 flex items-end justify-around gap-2 px-2">
                                <div className="flex flex-col items-center">
                                  <div 
                                    className="w-12 bg-orange-600 rounded-t-md" 
                                    style={{ 
                                      height: `${Math.max(20, (promoters.filter(p => p.status === 'complete').length / promoters.length) * 120)}px`
                                    }}
                                  ></div>
                                  <span className="text-xs text-gray-500 mt-1">Complete</span>
                                  <span className="text-xs font-medium">{promoters.filter(p => p.status === 'complete').length}</span>
                                </div>
                                <div className="flex flex-col items-center">
                                  <div 
                                    className="w-12 bg-yellow-400 rounded-t-md" 
                                    style={{ 
                                      height: `${Math.max(20, (promoters.filter(p => p.status === 'pending').length / promoters.length) * 120)}px`
                                    }}
                                  ></div>
                                  <span className="text-xs text-gray-500 mt-1">Pending</span>
                                  <span className="text-xs font-medium">{promoters.filter(p => p.status === 'pending').length}</span>
                                </div>
                                <div className="flex flex-col items-center">
                                  <div 
                                    className="w-12 bg-green-400 rounded-t-md" 
                                    style={{ 
                                      height: `${Math.max(20, (promoters.filter(p => p.status === 'active').length / promoters.length) * 120)}px`
                                    }}
                                  ></div>
                                  <span className="text-xs text-gray-500 mt-1">Active</span>
                                  <span className="text-xs font-medium">{promoters.filter(p => p.status === 'active').length}</span>
                                </div>
                              </div>
                            </>
                          ) : (
                            <p className="text-gray-400 text-sm">No talent data available</p>
                          )}
                        </div>
                      </div>
                      
                      <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-100">
                        <div className="flex items-center justify-between mb-4">
                          <h4 className="text-sm font-medium text-gray-700">Nationalities Distribution</h4>
                          <LineChart className="h-5 w-5 text-purple-500" />
                        </div>
                        <div className="h-48">
                          {promoters.length > 0 ? (
                            <div className="space-y-3 pt-2">
                              {Array.from(new Set(promoters.map(p => p.nationality))).map(nationality => {
                                const count = promoters.filter(p => p.nationality === nationality).length;
                                const percentage = Math.round((count / promoters.length) * 100);
                                return (
                                  <div key={nationality} className="relative">
                                    <div className="flex items-center justify-between mb-1">
                                      <span className="text-xs font-medium text-gray-700">{nationality}</span>
                                      <span className="text-xs text-gray-500">{count} ({percentage}%)</span>
                                    </div>
                                    <div className="w-full bg-gray-100 rounded-full h-2.5">
                                      <div 
                                        className="bg-purple-600 h-2.5 rounded-full" 
                                        style={{ width: `${percentage}%` }}
                                      ></div>
                                    </div>
                                  </div>
                                );
                              })}
                            </div>
                          ) : (
                            <div className="h-full flex items-center justify-center">
                              <p className="text-gray-400 text-sm">No nationality data available</p>
                            </div>
                          )}
                        </div>
                      </div>
                      
                      <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-100">
                        <div className="flex items-center justify-between mb-4">
                          <h4 className="text-sm font-medium text-gray-700">Experience Level</h4>
                          <BarChart2 className="h-5 w-5 text-purple-500" />
                        </div>
                        <div className="h-48">
                          {promoters.length > 0 ? (
                            <div className="w-full h-full flex items-center justify-center">
                              <div className="w-40 h-40 relative rounded-full bg-gray-50 flex items-center justify-center">
                                <div className="absolute inset-0">
                                  {/* 1-3 years slice */}
                                  <div 
                                    className="absolute inset-0 h-full w-full"
                                    style={{
                                      clipPath: `polygon(50% 50%, 100% 50%, ${100 - Math.cos(2 * Math.PI * (promoters.filter(p => (p.yearsExperience || 0) >= 1 && (p.yearsExperience || 0) < 3).length / promoters.length) * 100) * 50}% ${100 - Math.sin(2 * Math.PI * (promoters.filter(p => (p.yearsExperience || 0) >= 1 && (p.yearsExperience || 0) < 3).length / promoters.length) * 100) * 50}%)`,
                                      background: 'linear-gradient(135deg, #9333ea 0%, #a855f7 100%)'
                                    }}
                                  ></div>
                                  {/* 3-5 years slice */}
                                  <div 
                                    className="absolute inset-0 h-full w-full"
                                    style={{
                                      clipPath: `polygon(50% 50%, ${100 - Math.cos(2 * Math.PI * (promoters.filter(p => (p.yearsExperience || 0) >= 1 && (p.yearsExperience || 0) < 3).length / promoters.length) * 100) * 50}% ${100 - Math.sin(2 * Math.PI * (promoters.filter(p => (p.yearsExperience || 0) >= 1 && (p.yearsExperience || 0) < 3).length / promoters.length) * 100) * 50}%, ${50 - Math.cos(2 * Math.PI * ((promoters.filter(p => (p.yearsExperience || 0) >= 1 && (p.yearsExperience || 0) < 3).length + promoters.filter(p => (p.yearsExperience || 0) >= 3 && (p.yearsExperience || 0) < 5).length) / promoters.length) * 100) * 50}% ${50 - Math.sin(2 * Math.PI * ((promoters.filter(p => (p.yearsExperience || 0) >= 1 && (p.yearsExperience || 0) < 3).length + promoters.filter(p => (p.yearsExperience || 0) >= 3 && (p.yearsExperience || 0) < 5).length) / promoters.length) * 100) * 50}%)`,
                                      background: 'linear-gradient(135deg, #fbbf24 0%, #facc15 100%)'
                                    }}
                                  ></div>
                                  {/* 5+ years slice */}
                                  <div 
                                    className="absolute inset-0 h-full w-full"
                                    style={{
                                      clipPath: `polygon(50% 50%, ${50 - Math.cos(2 * Math.PI * ((promoters.filter(p => (p.yearsExperience || 0) >= 1 && (p.yearsExperience || 0) < 3).length + promoters.filter(p => (p.yearsExperience || 0) >= 3 && (p.yearsExperience || 0) < 5).length) / promoters.length) * 100) * 50}% ${50 - Math.sin(2 * Math.PI * ((promoters.filter(p => (p.yearsExperience || 0) >= 1 && (p.yearsExperience || 0) < 3).length + promoters.filter(p => (p.yearsExperience || 0) >= 3 && (p.yearsExperience || 0) < 5).length) / promoters.length) * 100) * 50}%, 0% 50%)`,
                                      background: 'linear-gradient(135deg, #22c55e 0%, #34d399 100%)'
                                    }}
                                  ></div>
                                </div>
                                <div className="absolute inset-0 rounded-full flex items-center justify-center">
                                  <div className="w-20 h-20 rounded-full bg-white shadow-sm flex items-center justify-center">
                                    <span className="text-sm font-medium text-purple-900">{promoters.length} total</span>
                                  </div>
                                </div>
                              </div>
                            </div>
                          ) : (
                            <div className="h-full flex items-center justify-center">
                              <p className="text-gray-400 text-sm">No experience data available</p>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="bg-white rounded-xl shadow-sm p-6 border border-gray-100">
                    <h3 className="text-lg font-medium text-gray-800 mb-4">Activity Summary</h3>
                    <div className="space-y-4">
                      <div className="flex items-center justify-between py-3 border-b border-gray-100">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
                          <span className="text-sm text-gray-700">Total Talent</span>
                        </div>
                        <span className="font-semibold text-orange-700">{promoters.length}</span>
                      </div>
                      <div className="flex items-center justify-between py-3 border-b border-gray-100">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                          <span className="text-sm text-gray-700">Nationalities Represented</span>
                        </div>
                        <span className="font-semibold text-orange-700">
                          {Array.from(new Set(promoters.map(p => p.nationality))).length}
                        </span>
                      </div>
                      <div className="flex items-center justify-between py-3 border-b border-gray-100">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                          <span className="text-sm text-gray-700">Average Experience (years)</span>
                        </div>
                        <span className="font-semibold text-orange-700">
                          {promoters.length > 0 
                            ? (promoters.reduce((sum, p) => sum + (p.yearsExperience || 0), 0) / promoters.length).toFixed(1)
                            : '0'}
                        </span>
                      </div>
                      <div className="flex items-center justify-between py-3">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                          <span className="text-sm text-gray-700">Areas Covered</span>
                        </div>
                        <span className="font-semibold text-orange-700">
                          {Array.from(new Set(promoters.map(p => p.area))).length}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              
              {isMediaRoute && (
                <div className="space-y-6">
                  <div className="flex flex-wrap gap-4 mb-6">
                    <button className="px-4 py-2 rounded-md bg-purple-600 text-white hover:bg-purple-700 flex items-center gap-2 shadow-sm">
                      <Upload className="h-4 w-4" />
                      <span>Upload Files</span>
                    </button>
                    <button className="px-4 py-2 rounded-md border border-purple-200 bg-white text-purple-700 hover:bg-purple-50 flex items-center gap-2 shadow-sm">
                      <span>Create Folder</span>
                    </button>
                  </div>
                
                  <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                    {Array.from({ length: 8 }).map((_, index) => (
                      <div key={index} className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow">
                        <div className="h-32 bg-purple-100 flex items-center justify-center">
                          <Image className="h-10 w-10 text-purple-300" />
                        </div>
                        <div className="p-3">
                          <p className="text-sm font-medium text-gray-800 truncate">Media Item {index + 1}</p>
                          <p className="text-xs text-gray-500">Added: {new Date().toLocaleDateString()}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                  
                  <div className="mt-6 flex justify-center">
                    <div className="bg-purple-100 text-purple-700 rounded-md px-4 py-2 text-sm">
                      Showing 8 of 24 media items
                    </div>
                  </div>
                </div>
              )}
              
              {/* Messages section removed */}
              
              {isCalendarRoute && (
                <div className="space-y-6">
                  <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
                    <div className="grid grid-cols-7 text-center border-b border-gray-100">
                      {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (
                        <div key={day} className="py-2 text-sm font-medium text-gray-600">
                          {day}
                        </div>
                      ))}
                    </div>
                    
                    <div className="grid grid-cols-7 grid-rows-5 gap-1 p-2">
                      {Array.from({ length: 35 }).map((_, index) => (
                        <div 
                          key={index} 
                          className={`p-2 min-h-20 text-sm ${
                            [10, 15, 22, 28].includes(index) 
                              ? 'bg-purple-50 rounded-md border border-purple-100' 
                              : ''
                          }`}
                        >
                          <span className="block text-right mb-1">{((index + 1) % 31) + 1}</span>
                          {index === 10 && (
                            <div className="bg-purple-200 text-purple-800 rounded px-2 py-1 text-xs">
                              Client Meeting
                            </div>
                          )}
                          {index === 15 && (
                            <div className="bg-yellow-200 text-yellow-800 rounded px-2 py-1 text-xs">
                              Promotion Event
                            </div>
                          )}
                          {index === 22 && (
                            <div className="bg-green-200 text-green-800 rounded px-2 py-1 text-xs">
                              Booking Confirmed
                            </div>
                          )}
                          {index === 28 && (
                            <div className="bg-blue-200 text-blue-800 rounded px-2 py-1 text-xs">
                              Team Meeting
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden p-4">
                    <h3 className="font-medium text-purple-900 mb-4">Upcoming Events</h3>
                    <div className="space-y-4">
                      <div className="flex items-center gap-4 p-3 bg-purple-50 rounded-lg">
                        <div className="flex-shrink-0 w-12 h-12 bg-purple-200 rounded-lg flex items-center justify-center text-purple-700 font-bold">
                          <CalendarIcon className="h-6 w-6" />
                        </div>
                        <div className="flex-1">
                          <p className="font-medium text-gray-800">Client Meeting</p>
                          <p className="text-sm text-gray-600">Tomorrow, 10:00 AM - 11:30 AM</p>
                        </div>
                        <div>
                          <button className="text-purple-600 hover:text-purple-800">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                            </svg>
                          </button>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-4 p-3 bg-yellow-50 rounded-lg">
                        <div className="flex-shrink-0 w-12 h-12 bg-yellow-200 rounded-lg flex items-center justify-center text-yellow-700 font-bold">
                          <CalendarIcon className="h-6 w-6" />
                        </div>
                        <div className="flex-1">
                          <p className="font-medium text-gray-800">Promotion Event</p>
                          <p className="text-sm text-gray-600">Next Week, 9:00 AM - 5:00 PM</p>
                        </div>
                        <div>
                          <button className="text-purple-600 hover:text-purple-800">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                            </svg>
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
          
          {/* Footer section */}
          <div className="mt-6 text-center text-xs text-gray-500">
            <p>&copy; {new Date().getFullYear()} Footprint Advertising Solutions LLC. All rights reserved.</p>
            <p className="mt-1 text-xs">Creating powerful brand impressions through exceptional talent</p>
          </div>
        </main>
      </div>
    </div>
  );
}
